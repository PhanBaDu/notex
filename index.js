// Number
let num = 42;
console.log(typeof num); // "number"

// BigInt
let big = 1234567890123456789012345678901234567890n;
console.log(typeof big); // "bigint"

// String
let str = "Hello, world!";
console.log(typeof str); // "string"

// Boolean
let isTrue = true;
console.log(typeof isTrue); // "boolean"

// Undefined
let x;
console.log(typeof x); // "undefined"

// Null (c√≥ ƒë·∫∑c ƒëi·ªÉm l·ªãch s·ª≠ n√™n typeof l√† "object")
let y = null;
console.log(typeof y); // "object" ‚ùó

// Symbol
let sym = Symbol("id");
console.log(typeof sym); // "symbol"

// Object
let person = { name: "Nam", age: 25 };
console.log(typeof person); // "object"

// Array (l√† object, nh∆∞ng n√™n ki·ªÉm tra b·∫±ng Array.isArray)
let arr = [1, 2, 3];
console.log(typeof arr); // "object"
console.log(Array.isArray(arr)); // true ‚úÖ

// Function (l√† object nh∆∞ng typeof tr·∫£ v·ªÅ "function")
function greet() {
  return "Hello!";
}
console.log(typeof greet); // "function"

// Date
let today = new Date();
console.log(typeof today); // "object"

// RegExp
let regex = /hello/i;
console.log(typeof regex); // "object"

// Map
let map = new Map();
console.log(typeof map); // "object"

// Set
let set = new Set();
console.log(typeof set); // "object"

// Promise
let promise = new Promise((resolve, reject) => resolve("done"));
console.log(typeof promise); // "object"

// ---
const user = {
  name: "Nam",
  age: 25,
  city: "Hanoi",
};

for (let key in user) {
  console.log(`${key}: ${user[key]}`);
}
// name: Nam
// age: 25
// city: Hanoi
Object.keys(user).forEach((key) => {
  console.log(`${key}: ${user[key]}`);
});

Object.values(user).forEach((value) => {
  console.log(value);
});
// Nam
// 25
// Hanoi
Object.entries(user).forEach(([key, value]) => {
  console.log(`${key}: ${value}`);
});

for (const [key, value] of Object.entries(user)) {
  console.log(`${key}: ${value}`);
}

// üîÅ 1. map(): Chuy·ªÉn ƒë·ªïi t·ª´ng ph·∫ßn t·ª≠ trong m·∫£ng
// Tr·∫£ v·ªÅ m·∫£ng m·ªõi c√≥ c√πng ƒë·ªô d√†i.
// D√πng ƒë·ªÉ bi·∫øn ƒë·ªïi gi√° tr·ªã t·ª´ng ph·∫ßn t·ª≠.
const numbers1 = [1, 2, 3];

const doubled = numbers1.map((num) => num * 2);
console.log(doubled); // [2, 4, 6]

// üîç 2. filter(): L·ªçc c√°c ph·∫ßn t·ª≠ tho·∫£ ƒëi·ªÅu ki·ªán
// Tr·∫£ v·ªÅ m·∫£ng m·ªõi, c√≥ th·ªÉ ng·∫Øn h∆°n ho·∫∑c r·ªóng.
// D√πng ƒë·ªÉ lo·∫°i b·ªè ph·∫ßn t·ª≠ kh√¥ng c·∫ßn.
const numbers2 = [1, 2, 3, 4, 5];

const evens = numbers2.filter((num) => num % 2 === 0);
console.log(evens); // [2, 4]

// üßÆ 3. reduce(): T√≠nh to√°n/t·ªïng h·ª£p th√†nh m·ªôt gi√° tr·ªã duy nh·∫•t
// D√πng ƒë·ªÉ t√≠nh t·ªïng, t·∫°o object, g·ªôp chu·ªói, v.v.
const numbers3 = [1, 2, 3, 4];

const sum = numbers3.reduce((accumulator, current) => accumulator + current, 0);
console.log(sum); // 10

// üß™ forEach(): Duy·ªát qua t·ª´ng ph·∫ßn t·ª≠ (kh√¥ng tr·∫£ m·∫£ng m·ªõi)
[1, 2, 3].forEach((num) => console.log(num));

// üîé find(): Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n tho·∫£ ƒëi·ªÅu ki·ªán
const users = [{ id: 1 }, { id: 2 }];
const found = users.find((user) => user.id === 2);
console.log(found); // {id: 2}

// üìç findIndex(): Tr·∫£ v·ªÅ index ƒë·∫ßu ti√™n tho·∫£ ƒëi·ªÅu ki·ªán
const index = users.findIndex((user) => user.id === 2);
console.log(index); // 1

// ‚ùì some(): Tr·∫£ v·ªÅ true n·∫øu √≠t nh·∫•t m·ªôt ph·∫ßn t·ª≠ th·ªèa ƒëi·ªÅu ki·ªán
[1, 2, 3].some((n) => n > 2); // true

// ‚úÖ every(): Tr·∫£ v·ªÅ true n·∫øu t·∫•t c·∫£ ph·∫ßn t·ª≠ th·ªèa ƒëi·ªÅu ki·ªán
[1, 2, 3].every((n) => n > 0); // true

// | H√†m         | Tr·∫£ v·ªÅ           | D√πng ƒë·ªÉ                          |
// | ----------- | ---------------- | -------------------------------- |
// | `map()`     | M·∫£ng m·ªõi         | Bi·∫øn ƒë·ªïi gi√° tr·ªã                 |
// | `filter()`  | M·∫£ng m·ªõi         | Gi·ªØ l·∫°i ph·∫ßn t·ª≠ tho·∫£ ƒëi·ªÅu ki·ªán   |
// | `reduce()`  | Gi√° tr·ªã duy nh·∫•t | T·ªïng h·ª£p, t√≠nh to√°n              |
// | `forEach()` | `undefined`      | Duy·ªát m·∫£ng, kh√¥ng c·∫ßn return     |
// | `find()`    | 1 ph·∫ßn t·ª≠        | T√¨m ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n             |
// | `some()`    | true/false       | C√≥ √≠t nh·∫•t 1 ph·∫ßn t·ª≠ ƒë√∫ng kh√¥ng? |
// | `every()`   | true/false       | T·∫•t c·∫£ ph·∫ßn t·ª≠ c√≥ ƒë√∫ng kh√¥ng?    |
